mod fractal;

use std::env;
use std::sync::{Mutex, Arc};
use fractal::{Fractal};
use std::io::{BufReader,BufRead};
use std::fs::File;


extern crate bmp;

fn main() {
    // ./bin [--maxthreads x] [-d] [-o outputfolder] <[-]|[inFiles]> outfile
    let args : Vec<String> = env::args().collect();

    //global vars
    let (all_out, nbr_threads, out_folder, out_file, in_files) = parse_args(args);
    print!("All out :{:?}\nNumber of thread: {:?}\nOutput folder: {:?}\nOutput file: {:?}\nInput files{:?}\n", all_out, nbr_threads, out_folder, out_file, in_files);
}

fn parse_args(args: Vec<String>)  -> (bool, i32, String, String, Vec<String>)
{
    let mut all_out = false;
    let mut nbr_threads = 1;
    let mut  out_folder: String = ".".to_string();
    let mut in_files: Vec<String> = Vec::new();
    let mut out_file: String = "".to_string();

    if args.len() < 3 {
        panic!("Not enough arguments given");
    }

    let mut index_args = 1;

    while index_args != args.len() {
        if args[index_args] == "-d" {
            all_out = true;
            index_args+=1;
        }
        else if args[index_args] == "--maxthreads" {
            nbr_threads = args[index_args + 1].parse::<i32>().unwrap();
            index_args+=2
        }
        else if args[index_args] == "-o" {
            out_folder = args[index_args + 1].clone();
            index_args+=2;
        }
        else if index_args == args.len() -1 {
            out_file = args[index_args].clone();
            index_args+=1;
        }
        else {
            in_files.push(args[index_args].clone());
            index_args+=1;
        }
        
    }

    if out_file == "" {
        panic!("No output file given !");
    }
    if in_files.is_empty() {
        panic!("No input method given !");
    }
    
    (all_out, nbr_threads, out_folder, out_file, in_files)
}

struct Buffer {
    fractales: Mutex<Vec<Fractal>>,
    nbr: Mutex<u32>,
}

fn reader(buffer: Arc<Buffer>, in_files: Vec<String>){
    let mut stdin = false;
    for file in in_files {
        if file == "-" {
            stdin = true;
            continue;
        }
        let f = File::open(file).unwrap();
        for line in BufReader::new(f).lines() {
        }
    }



}
